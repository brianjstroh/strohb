AWSTemplateFormatVersion: "2010-09-09"
Description: _Non-functional_ S3 to CloudFront Invalidation

Parameters:
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket
Resources:
  S3BucketNotification:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt InvalidateLambdaFunction.Arn

  InvalidateLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          import json

          def handler(event, context):
              cloudfront = boto3.client('cloudfront')
              record = event['Records'][0]
              bucket = record['s3']['bucket']['name']
              key = record['s3']['object']['key']

              invalidation_batch = {
                  'Paths': {
                      'Quantity': 1,
                      'Items': [f'/{key}']
                  },
                  'CallerReference': str(context.aws_request_id)
              }

              try:
                  response = cloudfront.create_invalidation(
                      DistributionId='!Ref CloudFrontDistributionId',
                      InvalidationBatch=invalidation_batch
                  )
                  print('Invalidation created:', response)
              except Exception as e:
                  print('Error creating invalidation:', e)

      Timeout: 30

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaCloudFrontPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InvalidateLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt S3BucketNotification.Arn

Outputs:
  LambdaFunctionARN:
    Description: The ARN of the Lambda function
    Value: !GetAtt InvalidateLambdaFunction.Arn
